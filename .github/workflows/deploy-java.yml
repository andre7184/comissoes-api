name: Deploy Aplicativo Java (comissoesapi)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 1. Checkout do Código
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.ref }}

      - name: 2. Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 3. Construir e Enviar Imagem Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.JAVA_PROJECT_REPO_NAME }}:latest # Ex: andre7184/comissoesapi:latest

      - name: 4. Conectar no Servidor, Configurar Nginx/Adminer e Fazer Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }} # 'deployer'
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Define e entra no diretório do projeto no VPS
            PROJECT_DIR="${{ secrets.JAVA_PROJECT_DIR }}" # Ex: /home/deployer/comissoesapi
            mkdir -p $PROJECT_DIR
            cd $PROJECT_DIR

            # --- Cria o docker-compose.yml (SEM 'version' e COM Adminer) ---
            cat << EOF > docker-compose.yml
            services:
              db_java:
                image: postgres:15
                container_name: ${{ secrets.JAVA_PROJECT_REPO_NAME }}_db # Ex: comissoesapi_db
                restart: unless-stopped
                environment:
                  POSTGRES_DB: \${DB_NAME}
                  POSTGRES_USER: \${DB_USER}
                  POSTGRES_PASSWORD: \${DB_PASSWORD}
                volumes:
                  - postgres_data_${{ secrets.JAVA_PROJECT_REPO_NAME }}:/var/lib/postgresql/data
                networks:
                  - java-net
              
              app_java:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.JAVA_PROJECT_REPO_NAME }}:latest # Ex: andre7184/comissoesapi:latest
                container_name: ${{ secrets.JAVA_PROJECT_REPO_NAME }}_web # Ex: comissoesapi_web
                restart: unless-stopped
                ports:
                  # App Java exposto APENAS no localhost:8081 para Nginx
                  - "127.0.0.1:${{ secrets.JAVA_APP_HOST_PORT }}:${{ secrets.JAVA_APP_INTERNAL_PORT }}" # Ex: 127.0.0.1:8081:8080
                env_file: .env
                depends_on:
                  - db_java
                networks:
                  - java-net
            
              # Serviço Adminer para gerenciamento do DB
              adminer:
                image: adminer # Imagem oficial do Adminer
                container_name: ${{ secrets.JAVA_PROJECT_REPO_NAME }}_adminer # Ex: comissoesapi_adminer
                restart: unless-stopped
                ports:
                  # Adminer exposto APENAS no localhost:8082 para Nginx
                  - "127.0.0.1:8082:8080" 
                networks:
                  - java-net

            volumes:
              postgres_data_${{ secrets.JAVA_PROJECT_REPO_NAME }}:

            networks:
              java-net:
            EOF
            
            # --- Cria o arquivo .env ---
            echo "SPRING_DATASOURCE_URL=jdbc:postgresql://db_java:5432/${{ secrets.DB_NAME }}" > .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "SPRING_JPA_HIBERNATE_DDL_AUTO=update" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

            # --- Cria a configuração do Nginx (COM HTTPS e Adminer) ---
            cat << EOF > nginx.conf
            server {
                # Bloco HTTP: Redireciona tudo para HTTPS
                listen 80;
                server_name ${{ secrets.JAVA_PROJECT_DOMAIN }}; # Ex: comissoesapi.promptweb.com.br
                return 301 https://\$host\$request_uri;
            }

            server {
                # Bloco HTTPS
                listen 443 ssl http2; 
                server_name ${{ secrets.JAVA_PROJECT_DOMAIN }}; # Ex: comissoesapi.promptweb.com.br

                # Certificados SSL (Certbot - usa o do domínio principal)
                ssl_certificate /etc/letsencrypt/live/promptweb.com.br/fullchain.pem; 
                ssl_certificate_key /etc/letsencrypt/live/promptweb.com.br/privkey.pem; 
                include /etc/letsencrypt/options-ssl-nginx.conf; 
                ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; 

                # Configuração para o App Java
                location / {
                    proxy_pass http://127.0.0.1:${{ secrets.JAVA_APP_HOST_PORT }}; # Ex: http://127.0.0.1:8081
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto https; 
                }

                # Configuração para o Adminer (acessível em /adminer/)
                location /adminerbd/ {
                    proxy_pass http://127.0.0.1:8082/; # Aponta para a porta interna do Adminer
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto https;
                    proxy_redirect off;
                }
            }
            EOF
            
            # --- Bloco de Administração do Servidor (com caminhos absolutos) ---
            NGINX_CONF_FILE="/etc/nginx/sites-available/${{ secrets.JAVA_PROJECT_DOMAIN }}"
            NGINX_LINK_FILE="/etc/nginx/sites-enabled/${{ secrets.JAVA_PROJECT_DOMAIN }}"

            echo "Movendo configuração do Nginx..."
            sudo /usr/bin/mv $PROJECT_DIR/nginx.conf $NGINX_CONF_FILE
            
            echo "Ativando site no Nginx..."
            # Garante que o link aponta para o arquivo correto
            sudo /usr/bin/ln -sf $NGINX_CONF_FILE $NGINX_LINK_FILE
            
            echo "Testando configuração do Nginx..."
            # Verificação explícita do código de saída
            if ! sudo /usr/sbin/nginx -t; then
              echo "==================================================="
              echo "ERRO CRÍTICO NA CONFIGURAÇÃO NGINX. REMOVENDO ARQUIVO."
              echo "==================================================="
              echo "Conteúdo do arquivo."
              echo "#====#====#====#====#====#====#====#"
              sudo cat "$NGINX_CONF_FILE"
              echo "#====#====#====#====#====#====#====#"
              # REMOÇÃO DO ARQUIVO COM ERRO E LINK (Melhoria de Erro)
              sudo rm -f "$NGINX_LINK_FILE" 
              sudo rm -f "$NGINX_CONF_FILE" 
              exit 1; 
            fi
            
            # --- Executa o Deploy ---
            echo "Parando contêineres antigos..."
            docker compose down --remove-orphans

            echo "Removendo contêineres em conflito (se existirem)..."
            docker rm -f ${{ secrets.JAVA_PROJECT_REPO_NAME }}_db || true
            docker rm -f ${{ secrets.JAVA_PROJECT_REPO_NAME }}_web || true
            docker rm -f ${{ secrets.JAVA_PROJECT_REPO_NAME }}_adminer || true 
              
            echo "Baixando nova imagem do App..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.JAVA_PROJECT_REPO_NAME }}:latest 

            echo "Iniciando contêineres..."
            docker compose up -d

            # Espera inteligente para o PostgreSQL
            echo "Aguardando o banco de dados (PostgreSQL) ficar pronto..."
            timeout=90
            while ! docker compose exec db_java pg_isready -U "${{ secrets.DB_USER }}" -h localhost; do
              sleep 3
              timeout=$((timeout - 3))
              if [ $timeout -le 0 ]; then
                echo "Erro: Timeout esperando pelo banco de dados."
                docker compose logs db_java
                exit 1
              fi
            done
            echo "✅ Banco de dados está pronto!"

            echo "Recarregando Nginx..."
            sudo /usr/bin/systemctl reload nginx

            echo "✅ Deploy concluído com sucesso!"
            echo "   App Java disponível em: https://${{ secrets.JAVA_PROJECT_DOMAIN }}"
            echo "   Adminer disponível em: https://${{ secrets.JAVA_PROJECT_DOMAIN }}/adminer/"